@page
@model VoiceLiveApi.Web.Pages.AdminModel
@{
    ViewData["Title"] = "Session Administration";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="text-center mb-4">
                <h1 class="display-5">Session Administration</h1>
                <p class="lead">Monitor and manage active Voice Live sessions</p>
            </div>

            <!-- Session Statistics -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body text-center">
                            <h5 class="card-title">Active Sessions</h5>
                            <h2 class="text-primary" id="sessionCount">-</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body text-center">
                            <h5 class="card-title">History Sessions</h5>
                            <h2 class="text-info" id="historyCount">-</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body text-center">
                            <h5 class="card-title">Last Updated</h5>
                            <small class="text-muted" id="lastUpdated">-</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Controls -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Session Management</h5>
                        <div>
                            <button type="button" class="btn btn-primary" id="refreshBtn">?? Refresh</button>
                            <button type="button" class="btn btn-warning" id="cleanupBtn">?? Cleanup Expired</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Active Sessions List -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Active Sessions</h5>
                </div>
                <div class="card-body">
                    <div id="sessionsContainer">
                        <div class="text-muted text-center">
                            <p>Loading session information...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    class SessionAdmin {
        constructor() {
            this.initializeElements();
            this.bindEvents();
            this.loadSessions();
            
            // Auto-refresh every 30 seconds
            setInterval(() => this.loadSessions(), 30000);
        }

        initializeElements() {
            this.sessionCount = document.getElementById('sessionCount');
            this.historyCount = document.getElementById('historyCount');
            this.lastUpdated = document.getElementById('lastUpdated');
            this.refreshBtn = document.getElementById('refreshBtn');
            this.cleanupBtn = document.getElementById('cleanupBtn');
            this.sessionsContainer = document.getElementById('sessionsContainer');
        }

        bindEvents() {
            this.refreshBtn.addEventListener('click', () => this.loadSessions());
            this.cleanupBtn.addEventListener('click', () => this.cleanupExpiredSessions());
        }

        async loadSessions() {
            try {
                const response = await fetch('/api/chat/admin/sessions');
                const result = await response.json();

                if (response.ok) {
                    this.updateStatistics(result);
                    this.renderSessions(result.activeSessions);
                } else {
                    this.showError(`Failed to load sessions: ${result.error}`);
                }
            } catch (error) {
                this.showError(`Error loading sessions: ${error.message}`);
            }
        }

        async cleanupExpiredSessions() {
            try {
                this.cleanupBtn.disabled = true;
                this.cleanupBtn.textContent = '?? Cleaning...';

                const response = await fetch('/api/chat/admin/cleanup', { method: 'POST' });
                const result = await response.json();

                if (response.ok) {
                    this.showSuccess(result.message);
                    await this.loadSessions(); // Refresh after cleanup
                } else {
                    this.showError(`Cleanup failed: ${result.error}`);
                }
            } catch (error) {
                this.showError(`Cleanup error: ${error.message}`);
            } finally {
                this.cleanupBtn.disabled = false;
                this.cleanupBtn.textContent = '?? Cleanup Expired';
            }
        }

        async forceRemoveSession(sessionId) {
            if (!confirm(`Are you sure you want to forcefully remove session ${sessionId}?`)) {
                return;
            }

            try {
                const response = await fetch(`/api/chat/admin/session/${sessionId}`, { method: 'DELETE' });
                const result = await response.json();

                if (response.ok) {
                    this.showSuccess(result.message);
                    await this.loadSessions(); // Refresh after removal
                } else {
                    this.showError(`Failed to remove session: ${result.error}`);
                }
            } catch (error) {
                this.showError(`Error removing session: ${error.message}`);
            }
        }

        updateStatistics(data) {
            this.sessionCount.textContent = data.sessionCount || 0;
            this.historyCount.textContent = data.historySessionCount || 0;
            this.lastUpdated.textContent = new Date().toLocaleTimeString();
        }

        renderSessions(sessions) {
            if (!sessions || sessions.length === 0) {
                this.sessionsContainer.innerHTML = `
                    <div class="text-muted text-center">
                        <p>No active sessions</p>
                    </div>
                `;
                return;
            }

            const sessionCards = sessions.map(sessionId => `
                <div class="card mb-2">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">Session: ${sessionId}</h6>
                                <small class="text-muted">Click to view details or manage</small>
                            </div>
                            <div>
                                <button type="button" class="btn btn-sm btn-outline-info" onclick="sessionAdmin.viewSessionDetails('${sessionId}')">
                                    ?? Details
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="sessionAdmin.forceRemoveSession('${sessionId}')">
                                    ??? Remove
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            this.sessionsContainer.innerHTML = sessionCards;
        }

        async viewSessionDetails(sessionId) {
            try {
                const [statusResponse, historyResponse] = await Promise.all([
                    fetch(`/api/chat/status?sessionId=${sessionId}`),
                    fetch(`/api/chat/history?sessionId=${sessionId}`)
                ]);

                const [statusResult, historyResult] = await Promise.all([
                    statusResponse.json(),
                    historyResponse.json()
                ]);

                let details = `Session ID: ${sessionId}\n\n`;
                
                if (statusResponse.ok) {
                    details += `Status:\n`;
                    details += `- Connected: ${statusResult.isConnected ? 'Yes' : 'No'}\n`;
                    details += `- Recording: ${statusResult.isRecording ? 'Yes' : 'No'}\n\n`;
                } else {
                    details += `Status: Error - ${statusResult.error}\n\n`;
                }

                if (historyResponse.ok) {
                    details += `Conversation History (${historyResult.messageCount} messages):\n`;
                    if (historyResult.conversationHistory && historyResult.conversationHistory.length > 0) {
                        details += historyResult.conversationHistory.slice(-5).join('\n');
                        if (historyResult.messageCount > 5) {
                            details += `\n... and ${historyResult.messageCount - 5} more messages`;
                        }
                    } else {
                        details += 'No conversation history';
                    }
                } else {
                    details += `History: Error - ${historyResult.error}`;
                }

                alert(details);
            } catch (error) {
                this.showError(`Error loading session details: ${error.message}`);
            }
        }

        showError(message) {
            // Simple alert for now - could be replaced with toast notifications
            alert(`Error: ${message}`);
        }

        showSuccess(message) {
            // Simple alert for now - could be replaced with toast notifications
            alert(`Success: ${message}`);
        }
    }

    // Initialize the admin interface when the page loads
    let sessionAdmin;
    document.addEventListener('DOMContentLoaded', () => {
        sessionAdmin = new SessionAdmin();
    });
</script>